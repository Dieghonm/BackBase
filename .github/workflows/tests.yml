name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Create necessary directories
      run: |
        mkdir -p reports htmlcov logs

    - name: Run linting
      run: |
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with coverage
      run: |
        pytest tests/ \
          --cov=app \
          --cov-report=xml:reports/coverage.xml \
          --cov-report=html:htmlcov \
          --cov-report=term-missing \
          --html=reports/report.html \
          --self-contained-html \
          --junit-xml=reports/junit.xml \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          reports/
          htmlcov/

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: reports/junit.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit (Security Linting)
      run: |
        bandit -r app/ -f json -o reports/bandit.json || true
        bandit -r app/ || true

    - name: Run Safety (Dependency Security Check)
      run: |
        safety check --json --output reports/safety.json || true
        safety check || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: reports/

  performance-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Run performance tests
      run: |
        pytest tests/test_performance.py \
          --benchmark-only \
          --benchmark-json=reports/benchmark.json \
          -v

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: reports/benchmark.json

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t backbase-api:test .

    - name: Run tests in Docker
      run: |
        docker run --rm \
          -v $PWD/reports:/app/reports \
          backbase-api:test \
          sh -c "pip install -r requirements-test.txt && pytest tests/ -v --junit-xml=reports/docker-junit.xml"

    - name: Upload Docker test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-test-results
        path: reports/docker-junit.xml

  coverage-check:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Generate coverage report
      run: |
        pytest tests/ --cov=app --cov-report=xml

    - name: Coverage check
      run: |
        coverage report --fail-under=75

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}

  notify-results:
    runs-on: ubuntu-latest
    needs: [test, security-scan, performance-test, coverage-check]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.performance-test.result == 'success' && needs.coverage-check.result == 'success' }}
      run: |
        echo "‚úÖ Todos os testes passaram com sucesso!"
        echo "üéâ Pipeline de testes conclu√≠da!"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.performance-test.result == 'failure' || needs.coverage-check.result == 'failure' }}
      run: |
        echo "‚ùå Alguns testes falharam!"
        echo "üîç Verifique os logs para mais detalhes."
        exit 1